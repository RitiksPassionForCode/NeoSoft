Create a table employee having columns -

CREATE TABLE Employee (
	Employee_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

1) Write an SQL query to fetch “FIRST_NAME” from the Employee table using the alias name <Employee_NAME>.
-> Select FIRST_NAME from Employee AS Employee_NAME;

2) Write an SQL query to fetch “FIRST_NAME” from the Employee table in upper case.
-> Select upper(FIRST_NAME) from Employee;

3) Write an SQL query to fetch unique values of DEPARTMENT from the Employee table.
-> Select DISTINCT DEPARTMENT from Employee;

4) Write an SQL query to print the first three characters of  FIRST_NAME from the Employee table.
-> Select substring(FIRST_NAME, 1, 3) from Employee;

5) Write an SQL query to find the position of the alphabet (‘a’) in the first name column ‘Amitabh’ from the Employee table.
-> Select INSTR(FIRST_NAME, BINARY'a') from Employee where FIRST_NAME = 'Amitabh';

6) Write an SQL query to print the FIRST_NAME from the Employee table after removing white spaces from the right side.
-> Select RTRIM(FIRST_NAME) from Employee;

7) Write an SQL query to print the DEPARTMENT from the Employee table after removing white spaces from the left side.
-> Select LTRIM(DEPARTMENT) from Employee;

8) Write an SQL query that fetches the unique values of DEPARTMENT from the Employee table and prints its length.
-> Select distinct length(department) from Employee;

9) Write an SQL query to print the FIRST_NAME from the Employee table after replacing ‘a’ with ‘A’.
-> Select REPLACE(FIRST_NAME,'a','A') from Employee;

10) Write an SQL query to print the FIRST_NAME and LAST_NAME from the Employee table into a single column COMPLETE_NAME. A space char should separate them.
-> Select CONCAT(FIRST_NAME, ' ', LAST_NAME) AS 'COMPLETE_NAME' from Employee;

11) Write an SQL query to print all Employee details from the Employee table order by FIRST_NAME Ascending.
-> Select * from Employee order by FIRST_NAME asc;

12) Write an SQL query to print all Employee details from the Employee table order by FIRST_NAME Ascending and DEPARTMENT Descending.
-> Select * from Employee order by FIRST_NAME asc,DEPARTMENT desc;

13) Write an SQL query to print details for Employees with the first names “Vipul” and “Satish” from the Employee table.
-> Select * from Employee where FIRST_NAME in ('Vipul','Satish');

14) Write an SQL query to print details of Employees excluding first names, “Vipul” and “Satish” from the Employee table.
-> Select * from Employee where FIRST_NAME not in ('Vipul','Satish');

15) Write an SQL query to print details of Employees with DEPARTMENT name as “Admin”.
-> Select * from Employee where DEPARTMENT like 'Admin%';

16) Write an SQL query to print details of the Employees whose FIRST_NAME contains ‘a’.
-> Select * from Employee where FIRST_NAME like '%a%';

17) Write an SQL query to print details of the Employees whose FIRST_NAME ends with ‘a’.
-> Select * from Employee where FIRST_NAME like '%a';

18) Write an SQL query to print details of the Employees whose FIRST_NAME ends with ‘h’ and contains six alphabets.
-> Select * from Employee where FIRST_NAME like '_____h';

19) Write an SQL query to print details of the Employees whose SALARY lies between 100000 and 500000.
-> Select * from Employee where SALARY between 100000 and 500000;

20) Write an SQL query to print details of the Employees who joined in Feb’2014.
-> Select * from Employee where year(JOINING_DATE) = 2014 and month(JOINING_DATE) = 2;

21) Write an SQL query to fetch the count of employees working in the department ‘Admin’.
-> SELECT COUNT(*) FROM Employee WHERE DEPARTMENT = 'Admin';

22) Write an SQL query to fetch Employee names with salaries >= 50000 and <= 100000.
-> SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) As Employee_Name, Salary
	FROM Employee 
	WHERE Employee_ID IN 
	(SELECT Employee_ID FROM Employee 
	WHERE Salary BETWEEN 50000 AND 100000);
	
23) Write an SQL query to fetch the no. of Employees for each department in descending order.
-> SELECT DEPARTMENT, count(Employee_ID) As No_Of_Employees 
	FROM Employee 
	GROUP BY DEPARTMENT 
	ORDER BY No_Of_Employees DESC;
	
24) Write an SQL query to print details of the Employees who are also Managers.
-> SELECT DISTINCT W.FIRST_NAME, T.Employee_TITLE
	FROM Employee W
	INNER JOIN Title T
	ON W.Employee_ID = T.Employee_REF_ID
	AND T.Employee_TITLE in ('Manager');
	
25) Write an SQL query to fetch duplicate records having matching data in some fields of a table.
-> SELECT Employee_TITLE, AFFECTED_FROM, COUNT(*)
	FROM Title
	GROUP BY Employee_TITLE, AFFECTED_FROM
	HAVING COUNT(*) > 1;
	
26) Write an SQL query to show only odd rows from a table.
-> SELECT * FROM Employee WHERE MOD (Employee_ID, 2) <> 0;

27) Write an SQL query to show only even rows from a table.
-> SELECT * FROM Employee WHERE MOD (Employee_ID, 2) = 0;

28) Write an SQL query to clone a new table from another table.
-> CREATE TABLE EmployeeClone LIKE Employee;

29) Write an SQL query to fetch intersecting records of two tables.
-> (SELECT * FROM Employee)
	INTERSECT
	(SELECT * FROM EmployeeClone);

30) Write an SQL query to show records from one table that another table does not have.
-> SELECT * FROM Employee
	MINUS
	SELECT * FROM Title;
	
31) Write an SQL query to show the current date and time.
-> SELECT NOW();

32) Write an SQL query to show the top n (say 10) records of a table.
-> SELECT * FROM Employee ORDER BY Salary DESC LIMIT 10;

33) Write an SQL query to determine the nth (say n=5) highest salary from a table.
-> SELECT Salary FROM Employee ORDER BY Salary DESC LIMIT n-1,1;

34) Write an SQL query to determine the 5th highest salary without using the TOP or limit method.
-> SELECT Salary
	FROM Employee E1
	WHERE 4 = (
	SELECT COUNT( DISTINCT ( E2.Salary ) )
	FROM Employee W2
	WHERE E2.Salary >= E1.Salary
	);
	
35) Write an SQL query to fetch the list of employees with the same salary.
-> Select distinct E.Employee_ID, E.FIRST_NAME, E.Salary 
	from Employee E, Employee E1 
	where E.Salary = E1.Salary 
	and E.Employee_ID != E1.Employee_ID;
	
36) Write an SQL query to show the second-highest salary from a table.
-> Select max(Salary) from Employee where Salary not in (Select max(Salary) from Employee);

37) Write an SQL query to show one row twice in the results from a table.
-> Select FIRST_NAME, DEPARTMENT from Employee E where E.DEPARTMENT='HR' 
	union all 
	select FIRST_NAME, DEPARTMENT from Employee E1 where E1.DEPARTMENT='HR';
	
38) Write an SQL query to fetch intersecting records of two tables.
-> (SELECT * FROM Employee)
	INTERSECT
	(SELECT * FROM EmployeeClone);

39) Write an SQL query to fetch the first 50% of records from a table.
-> SELECT * FROM Employee WHERE Employee_ID <= (SELECT count(Employee_ID)/2 from Employee);

40) Write an SQL query to fetch the departments that have less than five people in them.
-> SELECT DEPARTMENT, COUNT(Employee_ID) as 'Number of Employees' FROM Employee GROUP BY DEPARTMENT HAVING COUNT(Employee_ID) < 5;

41) Write an SQL query to show all departments along with the number of people in there.
-> SELECT DEPARTMENT, COUNT(DEPARTMENT) as 'Number of Employees' FROM Employee GROUP BY DEPARTMENT;

42) Write an SQL query to show the last record from a table.
-> Select * from Employee where Employee_ID = (SELECT max(Employee_ID) from Employee);

43) Write an SQL query to fetch the first row of a table.
-> Select * from Employee where Employee_ID = (SELECT min(Employee_ID) from Employee);

44) Write an SQL query to fetch the last five records from a table.
-> SELECT * FROM Employee WHERE Employee_ID <=5
	UNION
	SELECT * FROM (SELECT * FROM Employee W order by W.Employee_ID DESC) AS W1 WHERE W1.Employee_ID <=5;
	
45) Write an SQL query to print the name of employees having the highest salary in each department.
-> SELECT t.DEPARTMENT,t.FIRST_NAME,t.Salary from(SELECT max(Salary) as TotalSalary,DEPARTMENT from Employee group by DEPARTMENT) as TempNew 
	Inner Join Employee t on TempNew.DEPARTMENT=t.DEPARTMENT 
	and TempNew.TotalSalary=t.Salary;
	
46) Write an SQL query to fetch three max salaries from a table.
-> SELECT distinct Salary from Employee a WHERE 3 >= (SELECT count(distinct Salary) from Employee b WHERE a.Salary <= b.Salary) order by a.Salary desc;

47) Write an SQL query to fetch three min salaries from a table.
-> SELECT distinct Salary from Employee a WHERE 3 >= (SELECT count(distinct Salary) from Employee b WHERE a.Salary >= b.Salary) order by a.Salary desc;

48) Write an SQL query to fetch nth max salaries from a table.
-> SELECT distinct Salary from Employee a WHERE n >= (SELECT count(distinct Salary) from Employee b WHERE a.Salary <= b.Salary) order by a.Salary desc;

49)  Write an SQL query to fetch departments along with the total salaries paid for each of them.
-> SELECT DEPARTMENT, sum(Salary) from Employee group by DEPARTMENT;

50) Write an SQL query to fetch the names of Employees who earn the highest salary.
-> SELECT FIRST_NAME, SALARY from Employee WHERE SALARY=(SELECT max(SALARY) from Employee);

51) Write query for inner join for two employee tables.
-> SELECT Emp_Name, Emp_No, Emp_Profile, Emp_Country, Emp_Join_Date 
FROM Tb1_Employee INNER JOIN Tb2_Employment 
ON Tb1_Employee.Emp_ID=Tb2_Employment.Emp_ID;

52) Write query for LEFT JOIN for two employee tables.
-> SELECT Tb1_Employee.Emp_Name, Tb1_Employee.Emp_No, Tb2_Employment.Emp_Profile, Tb2_Employment.Emp_Country 
FROM Tb1_Employee LEFT JOIN Tb2_Employment 
ON Tb1_Employee.Emp_ID=Tb2_Employment.Emp_ID;

53) Write query for Right Join for two employee tables.
-> SELECT Tb1_Employee.Emp_Name, Tb1_Employee.Emp_No, Tb2_Employment.Emp_Profile, Tb2_Employment.Emp_Join_Date 
FROM Tb1_Employee RIGHT JOIN Tb2_Employment 
ON Tb1_Employee.Emp_ID=Tb2_Employment.Emp_ID;